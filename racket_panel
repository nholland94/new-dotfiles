#!/bin/sh
#|

COLOR_FILE=colors

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

grab_from_config()
{
  local raw_color=$(cat "$COLOR_FILE" | sed -n -e "s/^{$1}\\s\\+//p")
  local formatted_color=$(echo "$raw_color" | tr '[:lower:]' '[:upper:]')
  echo "$formatted_color"
}

COLOR_FOREGROUND=$(grab_from_config text)
COLOR_BACKGROUND=$(grab_from_config background)

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
xtitle -sf 'T%s' > "$PANEL_FIFO" &
clock -sf 'C%a %H:%M' > "$PANEL_FIFO" &

#cat "$PANEL_FIFO" | exec panel_bar
cat "$PANEL_FIFO" | exec racket -u "$0"

exit 1
|#

#lang racket/base

(require racket/block)
(require racket/dict)
(require racket/match)
(require racket/string)
(require racket/system)

(define (map-lines in fn [ls '()])
  (let ([line (read-line in)])
    (if (equal? line eof)
      ls
      (map-lines in fn (cons (fn line) ls)))))

(define colors
  (call-with-input-file "colors"
    (lambda (in)
      (map-lines in
        (lambda (line)
          (let ([parts (string-split (string-normalize-spaces line))])
            (cons
              (string->symbol (car parts))
              (string-upcase (car (cdr parts))))))))))

(define (strip-first-char str)
  (list->string (cdr (string->list str))))

(define (lemonbar-modifier inner-text)
  (string-append
    "%{"
    inner-text
    "}"))

(define (lemonbar-color-code color)
  (match color
    ['foreground #\F]
    ['background #\B]))

(define (lemonbar-set-color color value)
  (lemonbar-modifier
    (string-append
      (if (string? color) color (string (lemonbar-color-code color)))
      "#FF"
      value)))

(define (lemonbar-unset-color color)
  (lemonbar-modifier
    (string-append
      (if (string? color) color (string (lemonbar-color-code color)))
      "-")))

(define (lemonbar-colored-text foreground-color background-color text)
  (string-append
    (lemonbar-set-color 'foreground foreground-color)
    (lemonbar-set-color 'background background-color)
    " "
    text
    " "
    (lemonbar-unset-color 'background)
    (lemonbar-unset-color 'foreground)))

(define (lemonbar-alignment-code alignment)
  (match alignment
    ['left #\l]
    ['center #\c]
    ['right #\r]))

(define (build-lemonbar-string layout)
  (foldr
    (lambda (alignment-pair str)
      (string-append
        (lemonbar-modifier
          (string (lemonbar-alignment-code (car alignment-pair))))
        (cdr alignment-pair)
        str))
    "\n"
    layout))

; sadly, there is no easy way to do this immutably without building a stack, so I'm breaking my own rules here
(define clock "")
(define title "")

(define (lemonbar-layout)
  (list
    (cons 'left "asdf"))) 
;    (cons 'left title)
;    (cons 'right clock)))

(define (lemonbar-update update-str)
  (match (car (string->list update-str))
    [#\C
      (set! clock
        (lemonbar-colored-text
          (dict-ref colors 'text)
          (dict-ref colors 'background)
          (strip-first-char update-str)))]

    [#\T
      (set! title
        (lemonbar-colored-text
          (dict-ref colors 'highlight)
          (dict-ref colors 'background)
          (strip-first-char update-str)))]))

; lemonbar -n "lemonpanel" -g "x$PANEL_HEIGHT" -f "$PANEL_FONT_FAMILY" \
;   -F "#$COLOR_FOREGROUND" -B "#$COLOR_BACKGROUND" &
(define lemonbar-process
  (process
    (string-append
      "lemonbar -n racketpanel -g x24 -f "
      (getenv "PANEL_FONT_FAMILY")
      " -F \"#FF000000\" -B \"#FFFFFFFF\"")))

#;(define static-out
  (build-lemonbar-string (lemonbar-layout)))

#;(match lemonbar-process
  [(list out in _ _ handle)
    (for ([i (in-naturals)])
      (write-string static-out in))])

(match lemonbar-process
  [(list out in _ _ handle)
    (block
      (write-string "%{l}%{c}%{r}\n" in)

      ; infinite loop (why does racket not have "loop"?)
      (for ([i (in-naturals)])
        (block
          (lemonbar-update (read-line (current-input-port)))
          (write-string (build-lemonbar-string (lemonbar-layout)) (current-output-port))
          (write-string (build-lemonbar-string (lemonbar-layout)) in))))])

; vim: set ft=lisp:
