#!/bin/sh
#|

COLOR_FOREGROUND=$(cat colors | sed -n -e 's/^text\s\+//p')
COLOR_BACKGROUND=$(cat colors | sed -n -e 's/^background\s\+//p')

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"


bspc config top_padding $PANEL_HEIGHT
xtitle -sf 'T%s' > "$PANEL_FIFO" &
clock -sf 'C%a %H:%M' > "$PANEL_FIFO" &

cat "$PANEL_FIFO" | racket -u "$0" | \
  lemonbar -n "lemonpanel" -g "x$PANEL_HEIGHT" -f "$PANEL_FONT_FAMILY" \
    -F "#$COLOR_FOREGROUND" -B "#$COLOR_BACKGROUND" &

wait
exit 1
|#

#lang racket/base

(require racket/block)
(require racket/dict)
(require racket/match)
(require racket/string)

(define (map-lines in fn [ls '()])
  (let ([line (read-line in)])
    (if (equal? line eof)
      ls
      (map-lines in fn (cons (fn line) ls)))))

(define colors
  (call-with-input-file "colors"
    (lambda (in)
      (map-lines in
        (lambda (line)
          (let ([parts (string-split (string-normalize-spaces line))])
            (cons
              (string->symbol (car parts))
              (string-upcase (car (cdr parts))))))))))

(define (strip-first-char str)
  (list->string (cdr (string->list str))))

(define (lemonbar-modifier inner-text)
  (string-append
    "%{"
    inner-text
    "}"))

(define (lemonbar-color-code color)
  (match color
    ['foreground #\F]
    ['background #\B]))

(define (lemonbar-set-color color value)
  (lemonbar-modifier
    (string-append
      (if (string? color) color (string (lemonbar-color-code color)))
      "#FF"
      value)))

(define (lemonbar-unset-color color)
  (lemonbar-modifier
    (string-append
      (if (string? color) color (string (lemonbar-color-code color)))
      "-")))

(define (lemonbar-colored-text foreground-color background-color text)
  (string-append
    (lemonbar-set-color 'foreground foreground-color)
    (lemonbar-set-color 'background background-color)
    " "
    text
    " "
    (lemonbar-unset-color 'foreground)
    (lemonbar-unset-color 'background)))

(define (lemonbar-alignment-code alignment)
  (match alignment
    ['left #\l]
    ['center #\c]
    ['right #\r]))

(define (build-lemonbar-string layout)
  (string-append
    (foldl
      (lambda (alignment-pair str)
        (string-append
          str
          (lemonbar-modifier
            (string (lemonbar-alignment-code (car alignment-pair))))
          (cdr alignment-pair)))
      ""
      layout)
    "\n"))

; sadly, there is no easy way to do this immutably without building a stack, so I'm breaking my own rules here
(define clock "")
(define title "")

(define (lemonbar-layout)
  (list
    (cons 'left title)
    (cons 'center "")
    (cons 'right clock)))

(define (lemonbar-update update-str)
  (block
    (match (car (string->list update-str))
      [#\C
        (set! clock
          (lemonbar-colored-text
            (dict-ref colors 'text)
            (dict-ref colors 'background)
            (strip-first-char update-str)))]

      [#\T
        (set! title
          (lemonbar-colored-text
            (dict-ref colors 'highlight)
            (dict-ref colors 'background)
            (strip-first-char update-str)))])

    (display (build-lemonbar-string (lemonbar-layout)))))

(display "%{l}%{c}%{r}\n")

; infinite loop (why does racket not have "loop"?)
(for ([i (in-naturals)])
  (lemonbar-update (read-line (current-input-port))))

; vim: set ft=lisp:
